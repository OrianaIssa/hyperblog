pwd: Mostrará la carpeta donde te encuentras actualmente
cd: Nos lleva a nuestro home
cd /: Te lleva al home o root de la pc
cd /c: Te lleva al disco c
cd oissa/: Te lleva a la carpeta de tu usuario
cd .: Carpeta actual
cd ..: Te regresa a la carpeta anterior
ls: Lista los archivos que se encuentran en la raiz del equipo
ls -al: Muestra y lista todos los archivos del root, inluso los ocultos
ls -l: muestra y lista los archivos sin mostrar los ocultos
ls -a: Muestra todos los archivos del root
clear o ctr + l: Limpia la consola 
tab: Se utiliza para auto-completar el nombre de alguna carpeta en caso de que la misma exista dentro del directorio actual
mkdir "nombre de la carpeta": Crea una carpeta con el nombre indicado en el directorio actual
touch "nombre del archivo.txt": Crea un nuevo archivo txt en la carpeta indicada
cat "nombre del achivo.txt": Muestra el contenido del archivo indicado
code nombre del archivo: Abrirá el archivo en VS Code para poder modificarlo desde allí
history: Muestra la historia de todos los comandos escritos hasta el momento actual
!30 (numero de la linea de comando): Muestra el comando que se escribió en la linea que responde al numero de comando
rm "nombre del archivo": Elimina el archivo señalado
comando + --help: Arrojará todas las herramientas del comando

---------------------------------Creación de repositorio y primer commit--------------------------------------------
git init: Crea el repositorio
code: Abre el editor de texto Visual Studio Code
git status: Envia el estatus del repositorio
git add "nombre del archivo": Agregará al staging el archivo indicado
git add .: Agregará al staging todo los cambios que se hayan hecho en la carpeta actual
git commit -am + comentario referente al commit: Cumple la misma funcion que el "git add" pero solo se puede usar en archivos en los que se haya utilizado el "git add", de lo contrario no se podrá utilizar.
git commit -a: Cumplirá la misma funcion que el -am, pero abrirá el VIM para que escribamos el comentario referente al commit
git rm "nombre del archivo": Remueve el archivo señalado
git rm --cached "nombre del archivo": Remueve el archivo señalado pero lo guarda en memoria de manera que puedas recuperarlo con un "git add + nombre del archivo"
git rm --force: Elimina los archivos de Git y del disco duro. Git guarda todo, por lo que podemos recuperar archivos eliminados si es necesario (empleando comandos avanzados)
git commit: Se utiliza para enviar o guardar los cambios en el repositorio
*git commit -m "Este es el primer commit de este archivo": Es un commit con un comentario indicando el cambio que se está realizadno, lo cual es una buena práctica
git config: Mostrará todas las configuraciones del Git
git config --list: Mostrará la configuracion por defecto del Git
git config --list --show-origin: Se muestra donde están guardadas las configuraciones del Git, o el archivo de configuración
git log --stat: Mostrará los cambios especificos hechos a partir de cada commit
git checkout + hash del commit + nombre del archivo (Para volver a una versión anterior del archivo): Llevará el archivo al estado que tenia durante el commit referente al hash utilizado
git checkout + master + nombre del archivo: Llevará a la versión más actual del archivo señalado
gitk: Abrirá un software que viene instalado con el git y mostrará la historia del repositorio de una manera más visual



**El "--" indica que se utilizará una palabra, y el "-" significa que se utilizará un comando**

git config --global user.name "Oriana Issa": Agregará el nombre del dueño del repositorio al archivo de configuración
git config --global user.email "issaoriana1@gmail.com": Agregará el nombre del email del repositorio al archivo de configuración
git log + nombre del archivo: Mostrará todos los commit que tiene el archivo señalado (cambios en cada commit)
git log --all: Mostrará toda la historia que posee el repositorio, dependiendo de la rama en la que nos encontremos.
git log --al --graph: Mostrará toda la historia del repositorio sin importar la rama.
git log --al --graph --decorate --oneline: Mostrará toda la historia del repositorio sin importar la rama, de manera mas detallada.

************************Creación de alias***********************
alias + nombre del alias="comando que se quiere acortar" : alias arbolito="git log --all --graph --decorate --oneline": Guardará un comando largo en un nombre referencial llamado alias, para que cuando temgamos que ejecutarlo solo se tenga que colocar el nombre del alias.

git show: Mostrará la traza de todos los cambios generados en el archivo señalado
git diff + hash del log a consultar + hash del log a comparar: Mostrará toda la información referente al commit que se esté señalando
git reset + hash del log de la version del commit + --hard: Deshace todo, absolutamente todo. Toda la información de los commits y del área de staging se elimina del historial
git reset + hash del log de la version del commit + --soft: Borra el historial y los registros de Git de commits anteriores, pero guarda los cambios en Staging para aplicar las últimas actualizaciones a un nuevo commit.
git reset + hash del log de la version del commit + 0--mixed: Borra todo, exactamente todo. Toda la información de los commits y del área de staging se elimina del historial.
git reset HEAD: El comando git reset saca archivos del área de staging sin borrarlos ni realizar otras acciones.
Esto impide que los últimos cambios en estos archivos se envíen al último commit.
Podemos incluirlos de nuevo en staging con git add si cambiamos de opinión.


**Si queremos enviar un commit vacio luego de guardar cambios con "add" en el archivo Git nos enviará al editor de texto de Git llamado VIM, el cual nos pedira que le agreguemos un
nombre al cambio realizado en el commit, ya que nunca deberian enviarse los cambios vacios.
esc + shift + zz: Guarda los comentarios referentes a un commit en el VIM y guarda el commit en cuestión

-------------------------------Para salir de el bloque de codigo de Git Bash------------------------------------
":wq": Guarda los cambios y sale del bloque de código si este se queda colgado
 ":q": Sale del bloque de código si este se queda colgado



------------------Aquí se guardaran todos los comandos que se utilicen para trabajar en Github-------------------
git remote add origin + direccion https del repositoria en Github: 
git remote: Muestra que existe un origin, un repositorio en Github
git remote -v: Muestra las rutas del repositorio de Github
git push origin main: Envia al origen la rama main
git branch: Mostrará todas las ramas existentes en un repositorio
git branch -m main: pasar de la rama master a la main, debido a las actualizaciones de Git
git push origin main: Se utiliza para llevar los cambios del repositorio local a Github
git pull origin main: Se trae y guarda los cambios hechos en el repositorio de Github al repositorio local

-----------------Los tags son algo parecido a versiones de un archivo-----------------------

git tag: Mostrará todos los tags que se han hecho en un repositorio
git show-ref --tags: Para saber a que commit está conectado un tag en específico
git push origin --tags: Enviará los cambios referentes a los tags a internet

git tag -d + nombre del tag: Eliminará el tag al que se hace referencia del refpositorio local, pero se seguirá mostrando en Github, para eliminarlo del Github se debe hacer de la siguiente manera:
git push origin :refs/tags/nombre del tag: Eliminara el tag al que se hace referencia del origen, es decir en Github



***Siempre se debe traer la última version del respositorio de Github antes de hacer un commit en el repositorio local, se hace con pull

